w_mean <- w - mean(w)
abline(v=mean(w_mean),type="l",lwd=2,col="blue")
arr <- c(arr,mean(w_mean))
i <- i + 1
}
arr <- arr[2:length(arr)]
standard_deviation <- sd(arr)
# here we will abserve the blue lines covering the region nearby mean
print("the standard deviation is  ")
print(standard_deviation)
print("the original average sd")
print(10/sqrt(no_samples))
}
standard_error(30)
warning()
a
sw <- runif(no_samples,min=1,max=100)
w_mean <- w - mean(w)
abline(v=mean(w_mean),type="l",lwd=2,col="blue")
arr <- c(arr,mean(w_mean))
i <- i + 1
x <- seq(1,100,length=100)
y <- dnorm(x,mean=50,sd=10)
plot(x,y,type="l",lwd=3,xlab="random variable",ylab="distribution",main="normal distribution",col="red")
i <- 0
arr <- 0 
while(i <= 1000)
{
w <- runif(no_samples,min=1,max=100)
w_mean <- w - mean(w)
abline(v=mean(w_mean),type="l",lwd=2,col="blue")
arr <- c(arr,mean(w_mean))
i <- i + 1
}
plot(x,y,type="l",lwd=3,xlab="random variable",ylab="distribution",main="normal distribution",col="red")
w <- runif(30,min=1,max=100)
w_mean <- w - mean(w)
w_mean
abline(v=mean(w_mean),col="blue",lwd=2)
standard_error <- function(number_of_samples)
{
# let us frst plot a bell curve with mean=50 and sd = 10 
x <- seq(1,100,length=100)
y <- dnorm(x,mean=50,sd=10)
plot(x,y,type="l",lwd=3,xlab="random variable",ylab="distribution",main="normal distribution",col="red")
#sampling from the above curve
# so we plan to take 1000 such samples each with size = parameter AND plot them
# we will further increase the size of this samples we take, to demostrate the 
# bais-variance 
no_samples <- number_of_samples
i <- 0
arr <- 0 
while(i <= 1000)
{
w <- runif(no_samples,min=1,max=100)
w_mean <- w - mean(w)
abline(v=mean(w_mean),lwd=2,col="blue")
arr <- c(arr,mean(w_mean))
i <- i + 1
}
arr <- arr[2:length(arr)]
standard_deviation <- sd(arr)
# here we will abserve the blue lines covering the region nearby mean
print("the standard deviation is  ")
print(standard_deviation)
print("the original average sd")
print(10/sqrt(no_samples))
}
standard_error(30)
standard_error(40)
sd
sd(apply(matrix(runif(10*1000),1000),1,mean))
1/sqrt(12*10)
standard_error(10)
standard_error(10)standard_error <- function(number_of_samples)
{
# let us frst plot a bell curve with mean=50 and sd = 10 
x <- seq(1,100,length=100)
y <- dnorm(x,mean=50,sd=10)
plot(x,y,type="l",lwd=3,xlab="random variable",ylab="distribution",main="normal distribution",col="red")
#sampling from the above curve
# so we plan to take 1000 such samples each with size = parameter AND plot them
# we will further increase the size of this samples we take, to demostrate the 
# bais-variance 
no_samples <- number_of_samples
i <- 0
arr <- 0 
while(i <= 1000)
{
w <- runif(no_samples,min=1,max=100)
w_mean <- w - mean(w)
abline(v=mean(w_mean),lwd=2,col="blue")
arr <- c(arr,mean(w_mean))
i <- i + 1
}
arr <- arr[2:length(arr)]
standard_deviation <- sd(arr)
# here we will abserve the blue lines covering the region nearby mean
print("the standard deviation is  ")
print(standard_deviation)
print("the original average sd")
print(10/sqrt(12*no_samples))
}
standard_error <- function(number_of_samples)
{
# let us frst plot a bell curve with mean=50 and sd = 10 
x <- seq(1,100,length=100)
y <- dnorm(x,mean=50,sd=10)
plot(x,y,type="l",lwd=3,xlab="random variable",ylab="distribution",main="normal distribution",col="red")
#sampling from the above curve
# so we plan to take 1000 such samples each with size = parameter AND plot them
# we will further increase the size of this samples we take, to demostrate the 
# bais-variance 
no_samples <- number_of_samples
i <- 0
arr <- 0 
while(i <= 1000)
{
w <- runif(no_samples,min=1,max=100)
w_mean <- w - mean(w)
abline(v=mean(w_mean),lwd=2,col="blue")
arr <- c(arr,mean(w_mean))
i <- i + 1
}
arr <- arr[2:length(arr)]
standard_deviation <- sd(arr)
# here we will abserve the blue lines covering the region nearby mean
print("the standard deviation is  ")
print(standard_deviation)
print("the original average sd")
print(10/sqrt(12*no_samples))
}
standard_error(10)
standard_error <- function(number_of_samples)
{
# let us frst plot a bell curve with mean=50 and sd = 10 
x <- seq(1,100,length=100)
y <- dnorm(x,mean=50,sd=10)
plot(x,y,type="l",lwd=3,xlab="random variable",ylab="distribution",main="normal distribution",col="red")
#sampling from the above curve
# so we plan to take 1000 such samples each with size = parameter AND plot them
# we will further increase the size of this samples we take, to demostrate the 
# bais-variance 
no_samples <- number_of_samples
i <- 0
arr <- 0 
while(i <= 1000)
{
w <- runif(no_samples,min=1,max=100)
abline(v=mean(w),lwd=2,col="blue")
arr <- c(arr,mean(w))
i <- i + 1
}
arr <- arr[2:length(arr)]
standard_deviation <- sd(arr)
# here we will abserve the blue lines covering the region nearby mean
print("the standard deviation is  ")
print(standard_deviation)
print("the original average sd")
print(10/sqrt(12*no_samples))
}
standard_error(30)
standard_error(40)
standard_error(60)
standard_error(90)
standard_error(1110)
standard_error(1110)standard_error <- function(number_of_samples)
{
# let us frst plot a bell curve with mean=50 and sd = 10 
x <- seq(1,100,length=100)
y <- dnorm(x,mean=50,sd=10)
plot(x,y,type="l",lwd=3,xlab="random variable",ylab="distribution",main="normal distribution",col="red")
#sampling from the above curve
# so we plan to take 1000 such samples each with size = parameter AND plot them
# we will further increase the size of this samples we take, to demostrate the 
# bais-variance 
no_samples <- number_of_samples
i <- 0
arr <- 0 
while(i <= 100)
{
w <- runif(no_samples,min=1,max=100)
abline(v=mean(w),lwd=2,col="blue")
arr <- c(arr,mean(w))
i <- i + 1
}
arr <- arr[2:length(arr)]
standard_deviation <- sd(arr)
# here we will abserve the blue lines covering the region nearby mean
print("the standard deviation is  ")
print(standard_deviation)
print("the original average sd")
print(10/sqrt(no_samples))
}
standard_error <- function(number_of_samples)
{
# let us frst plot a bell curve with mean=50 and sd = 10 
x <- seq(1,100,length=100)
y <- dnorm(x,mean=50,sd=10)
plot(x,y,type="l",lwd=3,xlab="random variable",ylab="distribution",main="normal distribution",col="red")
#sampling from the above curve
# so we plan to take 1000 such samples each with size = parameter AND plot them
# we will further increase the size of this samples we take, to demostrate the 
# bais-variance 
no_samples <- number_of_samples
i <- 0
arr <- 0 
while(i <= 100)
{
w <- runif(no_samples,min=1,max=100)
abline(v=mean(w),lwd=2,col="blue")
arr <- c(arr,mean(w))
i <- i + 1
}
arr <- arr[2:length(arr)]
standard_deviation <- sd(arr)
# here we will abserve the blue lines covering the region nearby mean
print("the standard deviation is  ")
print(standard_deviation)
print("the original average sd")
print(10/sqrt(no_samples))
}
standard_error(20)
# bais-variance ZxcsacsaCSACSACSA
assdsdsadasd
q()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[,11] <- as.numeric(outcome[,11])
outcome[,11]
outcome[,1]
outcome[,2]
outcome[,3]
outcome[,7]
x <- outcome[,11]
colnames(x)
colnames(outcome[,11])
colnames(outcome)
x <- outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
x
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")outcome
colnames(outcome)
y <- outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
y
colnames(outcome)
z <- outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
z
z 
z <- as.numeric(z)
z
pnemonia <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
z
z <- na.string(z)
z <- na.strings(z)
pnemonia <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
p <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
p
outcomeoutcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="9999")
p <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
p
p
p[is.na(p)] <- 9999
p
colnames(outcome)
f <- outcome$State
f
p <- outcome[outcome$State == "TX"]
p <- outcome[outcome$State == "TX",]
P
p <- outcome[outcome$State == "TX",]
P
p <- subset(outcome,State == "TX")
p
p
p <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
p[is.na(p)] <- 9999
k <- min(p)
k
p
p <- subset(outcome,State == "TX")
p
colnames(p)
p[,11]
p
p <- subset(p,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack=min(as.numeric(p$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)))
p
p <- subset(p,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==min(as.numeric(p$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)))
p
p
p[,7]
p[,11]
p <- subset(p,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==min(as.numeric(p$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)))
p <- subset(p,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==min(as.numeric(p$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)))
p[is.na[p]]<- 9999
p[is.na(p)]<- 9999
p
p
p <- outcome[outcome$State == "TX",]
p[is.na(p)]<- 9999
p[,11]
p
p <- subset(p,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==min(as.numeric(p$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)))
p <- subset(p,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==min(as.numeric(p$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)))
p
p[,11]
p[,17]
p[,23]
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
    geom_bar(stat="identity",) +
    facet_grid(. ~ supp) +
    xlab("Dose in miligrams") +
    ylab("Tooth length") +
)
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
    geom_bar(stat="identity",) +
    facet_grid(. ~ supp) +
    xlab("Dose in miligrams") +
    ylab("Tooth length") +
    guides(fill=guide_legend(title="Supplement type")
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
    geom_bar(stat="identity",) +
    facet_grid(. ~ supp) +
    xlab("Dose in miligrams") +
    ylab("Tooth length") +
    guides(fill=guide_legend(title="Supplement type"))
colnames(outcome)
source("assment3.R")
best("TX","heart attack")
source("assment3.R")
best("TX","heart attack")
source("assment3.R")
best("TX","heart attack")
source("assment3.R")
best("TX","heart attack")
source("assment3.R")
source("assment3.R")
source("assment3.R")
best("TX","heart attack")
source("assment3.R")
best("TX","heart attack")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="9999")
outcome <- subset(outcome,State==state)
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack[is.na(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)] <- 9999
outcome <- subset(outcome,State==state)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="9999")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="9999")
outcome <- subset(outcome,State=="TX")
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack[is.na(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)] <- 9999
OUTCOME
outcome
outcome <- subset(outcome,State=="TX")
length(outcome)
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
length(outcome)
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack[is.na(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)] <- 9999
length(outcome)
outcome
length(outcome)
outcome[,11]
outcome[,7]
outcome[,7]
minimum <- min(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
minimum
outcome <- subset(outcome,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==minimum)
outcome[,7]
vector <- outcome$Hospital.Name
vector
source("assment3.R")
best("TX","heart attack")
v <- heart attack
v <- "heart attack"
length(v)
source("assment3.R")
source("assment3.R")
best("TX","heart attack")
source("assment3.R")
best("TX","heart attack")
source("assment3.R")
best("TX","heart attack")
source("assment3.R")
best("TX","heart failure")
x <- c("s","as","nav","kr","vi","gaur")
x
sort(x)
x[1]
x <- sort(x)
x
x[1]
source("assment3.R")
best("TX","heart failure")
source("assment3.R")
best("TX","heart failure")
source("assment3.R")
best("TX","heart failure")
source("assment3.R")
best("TX","heart pnemonia")
source("assment3.R")
best("TX","pnemonia")
best("TX","heart failure")
best("TX","pnemonia")
best("TX","heart attack")
outcome[,7]
 datasets(mtcars)
 dataset(mtcars)
 datasets(mtcars)
library(UsingR)
datasets(mtcars)
c <- matrix(1:100)
c
c[c=122]
c[c=23]
c <- c("as","nav","vi")
c[c="as"]
c
c(c="as")
c
c[1]
which(c="as")
which(c=="as")
which(c=="ass")
as.boolean(which(c=="ass"))
as.numeric(which(c=="ass"))
as.logical(which(c=="ass"))
as.logical(1)
c <- as.logical(which(c=="ass"))
c
c <- as.character(which(c=="ass"))
c
c <- as.character(which(c=="ass"))
which(c=="ass")
d <- which(c=="ass")
d + 1
d + 3
which(c=="ass")
which(c=="as")
ca <- c("as","nav","vi")
which(ca=="as")
which(ca=="ass")
d <- which(ca=="ass")
d + 2
which(ca=="as")
which(ca=="as",arr.ind=TRUE)
which(ca=="asS",arr.ind=TRUE)
length(which(ca=="ass"))
length(which(ca=="as"))
source("assment3.R")
best("MD", "pneumonia")
best("MD", "pneumonia")
source("assment3.R")
best("MD", "pneumonia")
source("assment3.R")
best("MD", "pneumonia")
best("TX", "heart attack")
best("TX", "heart failure")
source("assment3.R")
best("TX", "heart failure")
source("assment3.R")
best("TX", "heart failure")
source("assment3.R")
best("TX", "heart failure")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="9999")
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure[is.na(as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))] <- 9999
outcome <- subset(outcome,State=="TX")
outcome <- subset(outcome,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure==min(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
vector <- outcome$Hospital.Name
 print(vector)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- subset(outcome,State=="TX")
colnames(outcome)
outcome[,2]
outcome[which(outcome[,2]=="FORT DUNCAN MEDICAL CENTER"),2]
which(outcome[,2]=="FORT DUNCAN MEDICAL CENTER")
outcome[42,]
outcome[42,17]
min(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
min()
min(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
colnames(outcome)
(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="9999")
outcome <- subset(outcome,State==state)
outcome <- subset(outcome,State=="TX")
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure[is.na(as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))] <- 9999
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
class(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
source("assment3.R")
source("assment3.R")
source("assment3.R")
"FORT DUNCAN MEDICAL CENTER"
source("assment3.R")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("assment3.R")
source("assment3.R")
best("NY", "hert attack")
list.files()szdsafdsfdsfsf
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
}vd
